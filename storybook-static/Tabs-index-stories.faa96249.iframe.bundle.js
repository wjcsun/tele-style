"use strict";(self.webpackChunktele_style=self.webpackChunktele_style||[]).push([[994],{"./src/components/Tabs/index.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Playground:()=>Playground,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/.pnpm/next@14.2.24_@babel+core@7.26.8_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/compiled/react/jsx-runtime.js"),react__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/.pnpm/next@14.2.24_@babel+core@7.26.8_react-dom@18.3.1_react@18.3.1/node_modules/next/dist/compiled/react/index.js"),___WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/components/Tabs/index.tsx"),_TabsItem__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/components/Tabs/TabsItem/index.tsx");const __WEBPACK_DEFAULT_EXPORT__={title:"Components/TabsList",component:___WEBPACK_IMPORTED_MODULE_2__.Z,tags:["autodocs"],argTypes:{children:{control:!1}}},labels=[{label:"Label1",value:"Label1"},{label:"Label2",value:"Label2"},{label:"Label3",value:"Label3"}],Playground={render:args=>{const[selected,setSelected]=(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)("Label1");return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(___WEBPACK_IMPORTED_MODULE_2__.Z,{...args,children:labels.map((({value,label},index)=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(_TabsItem__WEBPACK_IMPORTED_MODULE_3__.Z,{selected:selected===value,onClick:()=>setSelected(value),children:label},index)))})},decorators:[Component=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)("div",{style:{maxWidth:500},children:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__.jsx)(Component,{})})]},__namedExportsOrder=["Playground"];Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const [selected, setSelected] = useState('Label1');\n    return <TabsList {...args}>\n        {labels.map(({\n        value,\n        label\n      }, index) => <TabsItem key={index} selected={selected === value} onClick={() => setSelected(value)}>\n            {label}\n          </TabsItem>)}\n      </TabsList>;\n  },\n  decorators: [Component => <div style={{\n    maxWidth: 500\n  }}>\n        <Component />\n      </div>]\n}",...Playground.parameters?.docs?.source}}}}}]);